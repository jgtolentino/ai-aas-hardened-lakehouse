name: Medallion ETL Pipeline

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_full_refresh:
        description: 'Force full refresh of all layers'
        required: false
        default: false
        type: boolean
      specific_layer:
        description: 'Specific layer to process (bronze/silver/gold/platinum/all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - bronze
          - silver
          - gold
          - platinum

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  PGURI: ${{ secrets.PGURI }}

jobs:
  etl-pipeline:
    name: Run Medallion ETL
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install -g tsx @supabase/supabase-js
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Test database connection
        run: |
          echo "Testing database connection..."
          psql "$PGURI" -c "SELECT version();" || exit 1
          
      - name: Bronze Layer - Check for new files
        if: ${{ github.event.inputs.specific_layer == 'all' || github.event.inputs.specific_layer == 'bronze' }}
        id: bronze
        run: |
          echo "🥉 Processing Bronze layer..."
          
          # Log pipeline start
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('bronze_ingestion', '${{ github.run_id }}', 'running');"
          
          # Check for unprocessed files in storage
          UNPROCESSED_COUNT=$(curl -s -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            "$SUPABASE_URL/storage/v1/object/list/scout-ingest" | jq length)
          
          echo "Found $UNPROCESSED_COUNT files to process"
          echo "unprocessed_count=$UNPROCESSED_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$UNPROCESSED_COUNT" -gt 0 ]; then
            # Trigger the ingestion function
            curl -X POST "$SUPABASE_URL/functions/v1/ingest-bronze" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
              -H "Content-Type: application/json"
          fi
          
          # Update freshness
          psql "$PGURI" -c "SELECT scout_monitoring.update_freshness('bronze_edge_raw', 'bronze', '1 hour');"
          
          # Log completion
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('bronze_ingestion', '${{ github.run_id }}', 'success', $UNPROCESSED_COUNT);"
          
      - name: Silver Layer - Transform and normalize
        if: ${{ github.event.inputs.specific_layer == 'all' || github.event.inputs.specific_layer == 'silver' }}
        run: |
          echo "🥈 Processing Silver layer..."
          
          # Log pipeline start
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('silver_transformation', '${{ github.run_id }}', 'running');"
          
          # No explicit transformation needed as silver is a view
          # Just verify the view is working
          SILVER_COUNT=$(psql "$PGURI" -t -c "SELECT COUNT(*) FROM scout.silver_edge_events;")
          
          echo "Silver layer has $SILVER_COUNT records"
          
          # Update freshness
          psql "$PGURI" -c "SELECT scout_monitoring.update_freshness('silver_edge_events', 'silver', '1 hour');"
          
          # Log completion
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('silver_transformation', '${{ github.run_id }}', 'success', $SILVER_COUNT);"
          
      - name: Gold Layer - Business aggregations
        if: ${{ github.event.inputs.specific_layer == 'all' || github.event.inputs.specific_layer == 'gold' }}
        run: |
          echo "🥇 Processing Gold layer..."
          
          # Log pipeline start
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('gold_aggregation', '${{ github.run_id }}', 'running');"
          
          # Refresh materialized views if any (currently using views)
          # Check daily transactions
          DAILY_COUNT=$(psql "$PGURI" -t -c "SELECT COUNT(*) FROM scout_gold.daily_transactions;")
          STORE_COUNT=$(psql "$PGURI" -t -c "SELECT COUNT(*) FROM scout_gold.store_rankings;")
          
          echo "Gold layer: $DAILY_COUNT daily records, $STORE_COUNT stores"
          
          # Run data quality checks
          psql "$PGURI" << SQL
            SELECT scout_monitoring.run_quality_check(
              'gold_daily_transactions',
              'completeness_check',
              'completeness',
              'SELECT COUNT(*) * 100.0 / NULLIF((SELECT COUNT(*) FROM scout.bronze_edge_raw), 0) FROM scout_gold.daily_transactions',
              NULL
            );
          SQL
          
          # Update freshness
          psql "$PGURI" -c "SELECT scout_monitoring.update_freshness('gold_aggregates', 'gold', '4 hours');"
          
          # Log completion
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('gold_aggregation', '${{ github.run_id }}', 'success', $DAILY_COUNT);"
          
      - name: Platinum Layer - ML features and exports
        if: ${{ github.event.inputs.specific_layer == 'all' || github.event.inputs.specific_layer == 'platinum' }}
        run: |
          echo "💎 Processing Platinum layer..."
          
          # Log pipeline start
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('platinum_ml_features', '${{ github.run_id }}', 'running');"
          
          # Compute store features
          psql "$PGURI" -c "SELECT scout_platinum.compute_store_features();"
          
          # Trigger export function
          curl -X POST "$SUPABASE_URL/functions/v1/export-platinum?type=all" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            -H "Content-Type: application/json"
          
          FEATURE_COUNT=$(psql "$PGURI" -t -c "SELECT COUNT(*) FROM scout_platinum.store_features;")
          echo "Platinum layer: $FEATURE_COUNT store features computed"
          
          # Update freshness
          psql "$PGURI" -c "SELECT scout_monitoring.update_freshness('platinum_features', 'platinum', '24 hours');"
          
          # Log completion
          psql "$PGURI" -c "SELECT scout_monitoring.log_pipeline_run('platinum_ml_features', '${{ github.run_id }}', 'success', $FEATURE_COUNT);"
          
      - name: Check for alerts
        if: always()
        run: |
          echo "🚨 Checking for alerts..."
          psql "$PGURI" -c "SELECT scout_monitoring.check_alerts();"
          
          # Get active alerts
          ALERTS=$(psql "$PGURI" -t -c "SELECT COUNT(*) FROM scout_monitoring.active_alerts;")
          if [ "$ALERTS" -gt 0 ]; then
            echo "⚠️ Found $ALERTS active alerts!"
            psql "$PGURI" -c "SELECT rule_name, severity, message FROM scout_monitoring.active_alerts;"
          else
            echo "✅ No active alerts"
          fi
          
      - name: Generate summary report
        if: always()
        run: |
          echo "📊 ETL Pipeline Summary"
          echo "======================="
          
          psql "$PGURI" << SQL
            SELECT 
              component,
              healthy,
              unhealthy,
              health_percentage || '%' as health_pct
            FROM scout_monitoring.system_status;
          SQL
          
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 Medallion ETL Pipeline Failed!
            
            Workflow: ${{ github.workflow }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true