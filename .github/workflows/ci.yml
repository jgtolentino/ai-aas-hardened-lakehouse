name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: SQL Lint
      uses: yokawasa/action-sqlcheck@v1.4.0
      with:
        post-comment: true
        risk-level: 3
        verbose: true
        target: |
          platform/scout/migrations/*.sql
          platform/scout/quality/*.sql
    
    - name: YAML Lint
      uses: ibiqlik/action-yamllint@v3
      with:
        file_or_dir: |
          platform/lakehouse/**/*.yaml
          platform/security/**/*.yaml
          platform/superset/**/*.yaml
    
    - name: Dockerfile Lint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: platform/lakehouse/dbt/Dockerfile

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  test-migrations:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: supabase/postgres:15.1.0.147
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test SQL Migrations
      env:
        PGPASSWORD: postgres
      run: |
        for sql in platform/scout/migrations/*.sql; do
          echo "Testing $sql..."
          psql -h localhost -U postgres -d postgres -f "$sql"
        done

  bruno-tests:
    runs-on: ubuntu-latest
    needs: [test-migrations]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Bruno CLI
      run: npm install -g @usebruno/cli
    
    - name: Run Bruno smoke tests
      run: |
        cd platform/scout/bruno
        # Run only basic connectivity tests in CI
        bruno run --env development \
          18_test_connection.bru \
          09_seed_dims.bru

  dbt-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dbt
      run: pip install dbt-trino==1.8.5
    
    - name: dbt deps
      working-directory: platform/lakehouse/dbt
      run: dbt deps
    
    - name: dbt compile
      working-directory: platform/lakehouse/dbt
      run: dbt compile --profiles-dir profiles

  build-images:
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    permissions:
      contents: read
      packages: write
      id-token: write
    
    strategy:
      matrix:
        include:
          - context: platform/lakehouse/dbt
            image: scout-dbt-runner
          - context: platform/router
            image: scout-router
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cosign
      uses: sigstore/cosign-installer@v3.7.0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push
      id: build
      uses: docker/build-push-action@v6
      with:
        context: ${{ matrix.context }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true
    
    - name: Sign image
      if: github.event_name != 'pull_request'
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        cosign sign --yes \
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.image }}@${{ steps.build.outputs.digest }}

  great-expectations:
    runs-on: ubuntu-latest
    needs: [test-migrations]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Great Expectations
      run: pip install great-expectations==0.17.12
    
    - name: Validate expectations
      working-directory: platform/scout/quality
      run: |
        great_expectations suite list
        great_expectations checkpoint list

  bruno-smoke:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
      SUPABASE_ANON: ${{ secrets.SUPABASE_ANON }}
      SUPERSET_BASE: ${{ secrets.SUPERSET_BASE }}
      SUPERSET_USER: ${{ secrets.SUPERSET_USER }}
      SUPERSET_PASSWORD: ${{ secrets.SUPERSET_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: 
          node-version: '20'
      - name: Install Bruno CLI
        run: npm i -g @usebruno/cli
      - name: Write env.json
        run: |
          mkdir -p platform/scout/bruno
          cat > platform/scout/bruno/env.json <<EOF
          { "env": {
            "SUPABASE_URL": "${SUPABASE_URL}",
            "SUPABASE_SERVICE_ROLE": "${SUPABASE_SERVICE_ROLE}",
            "SUPABASE_ANON": "${SUPABASE_ANON}",
            "SUPERSET_BASE": "${SUPERSET_BASE}",
            "SUPERSET_USER": "${SUPERSET_USER}",
            "SUPERSET_PASSWORD": "${SUPERSET_PASSWORD}"
          }}
          EOF
      - name: Run smoke requests
        run: |
          cd platform/scout/bruno
          bruno run --env development \
            09_seed_dims.bru \
            10_txn_ingest.bru \
            11_verify_silver.bru \
            12_query_gold_daily.bru \
            19_rls_negative.bru