name: Dataset Publisher Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'platform/scout/**'
      - 'scripts/**'
      - 'supabase/**'
      - 'tests/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'platform/scout/**'
      - 'scripts/**'
      - 'supabase/**'
      - 'tests/**'
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment (staging/production)'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - schema
          - ingestion
          - storage
          - etl
          - performance
          - security

env:
  NODE_VERSION: '20'

jobs:
  test-dataset-publisher:
    name: Test Dataset Publisher
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        test_type: [unit, integration, performance]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm install
          npm install -g @supabase/supabase-js
          
      - name: Setup test environment
        run: |
          # Create test directories
          mkdir -p test-results test-data test-temp
          
          # Install additional test dependencies
          npm install --save-dev jest supertest
          
      - name: Validate environment
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_KEY" ]; then
            echo "‚ùå Missing required environment variables"
            echo "Please set SUPABASE_URL and SUPABASE_SERVICE_KEY in repository secrets"
            exit 1
          fi
          
          echo "‚úÖ Environment variables configured"
          echo "üîó Testing connection to: $SUPABASE_URL"
          
      - name: Run schema tests
        if: ${{ matrix.test_type == 'unit' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TEST_SUITE: schema
        run: |
          echo "üß™ Running schema validation tests..."
          node tests/dataset-publisher.test.js
          
      - name: Run ingestion tests  
        if: ${{ matrix.test_type == 'integration' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TEST_SUITE: ingestion
        run: |
          echo "üß™ Running data ingestion tests..."
          node tests/dataset-publisher.test.js
          
      - name: Run performance tests
        if: ${{ matrix.test_type == 'performance' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TEST_SUITE: performance
        run: |
          echo "üß™ Running performance tests..."
          node tests/dataset-publisher.test.js
          
      - name: Generate test report
        if: always()
        run: |
          echo "üìä Generating test report..."
          
          # Find the latest test results file
          LATEST_RESULT=$(ls -t test-results/dataset-publisher-*.json 2>/dev/null | head -1)
          
          if [ -f "$LATEST_RESULT" ]; then
            echo "üìÅ Test results found: $LATEST_RESULT"
            
            # Extract summary
            PASSED=$(jq -r '.summary.passed' "$LATEST_RESULT")
            FAILED=$(jq -r '.summary.failed' "$LATEST_RESULT")
            SKIPPED=$(jq -r '.summary.skipped' "$LATEST_RESULT")
            SUCCESS_RATE=$(jq -r '.summary.successRate' "$LATEST_RESULT")
            
            echo "‚úÖ Passed: $PASSED"
            echo "‚ùå Failed: $FAILED"
            echo "‚è≠Ô∏è  Skipped: $SKIPPED"
            echo "üéØ Success Rate: ${SUCCESS_RATE}%"
            
            # Set outputs for other jobs
            echo "test_passed=$PASSED" >> $GITHUB_OUTPUT
            echo "test_failed=$FAILED" >> $GITHUB_OUTPUT
            echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
            
          else
            echo "‚ö†Ô∏è  No test results file found"
            echo "test_passed=0" >> $GITHUB_OUTPUT
            echo "test_failed=1" >> $GITHUB_OUTPUT
            echo "success_rate=0" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test_type }}
          path: |
            test-results/
            test-temp/
          retention-days: 30
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find latest test results
            const resultsDir = './test-results';
            if (!fs.existsSync(resultsDir)) return;
            
            const files = fs.readdirSync(resultsDir)
              .filter(f => f.startsWith('dataset-publisher-'))
              .sort()
              .reverse();
            
            if (files.length === 0) return;
            
            const resultsFile = path.join(resultsDir, files[0]);
            const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
            
            const testType = '${{ matrix.test_type }}';
            const successRate = results.summary.successRate;
            const statusEmoji = successRate >= 90 ? '‚úÖ' : successRate >= 75 ? '‚ö†Ô∏è' : '‚ùå';
            
            const comment = `## ${statusEmoji} Dataset Publisher Tests (${testType})
            
            **Results Summary:**
            - ‚úÖ Passed: ${results.summary.passed}
            - ‚ùå Failed: ${results.summary.failed}  
            - ‚è≠Ô∏è Skipped: ${results.summary.skipped}
            - üéØ Success Rate: ${successRate}%
            
            ${results.errors.length > 0 ? `
            **Failures:**
            ${results.errors.map(e => `- \`${e.test}\`: ${e.error}`).join('\n')}
            ` : ''}
            
            <details>
            <summary>View detailed results</summary>
            
            \`\`\`json
            ${JSON.stringify(results.summary, null, 2)}
            \`\`\`
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  test-edge-functions:
    name: Test Edge Functions
    runs-on: ubuntu-latest
    needs: test-dataset-publisher
    if: success() || failure()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Test ingest-bronze function
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          echo "üß™ Testing ingest-bronze Edge Function..."
          
          response=$(curl -s -w "\n%{http_code}" \
            -X POST "$SUPABASE_URL/functions/v1/ingest-bronze" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY" \
            -H "Content-Type: application/json" \
            -d '{"test": true}')
          
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)
          
          if [ "$http_code" = "404" ]; then
            echo "‚ùå ingest-bronze function not deployed"
            exit 1
          elif [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "‚úÖ ingest-bronze function responding"
          else
            echo "‚ö†Ô∏è ingest-bronze function response: $http_code"
            echo "$body"
          fi
          
      - name: Test export-platinum function
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          echo "üß™ Testing export-platinum Edge Function..."
          
          response=$(curl -s -w "\n%{http_code}" \
            -X GET "$SUPABASE_URL/functions/v1/export-platinum/health" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_KEY")
          
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)
          
          if [ "$http_code" = "404" ]; then
            echo "‚ùå export-platinum function not deployed"
            exit 1
          elif [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "‚úÖ export-platinum function responding"
          else
            echo "‚ö†Ô∏è export-platinum function response: $http_code"
            echo "$body"
          fi

  test-storage-buckets:
    name: Test Storage Buckets
    runs-on: ubuntu-latest
    needs: test-dataset-publisher
    if: success() || failure()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Test storage buckets
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          echo "üß™ Testing storage bucket accessibility..."
          
          buckets=("scout-ingest" "scout-silver" "scout-gold" "scout-platinum")
          
          for bucket in "${buckets[@]}"; do
            echo "üìÅ Testing bucket: $bucket"
            
            response=$(curl -s -w "\n%{http_code}" \
              -X GET "$SUPABASE_URL/storage/v1/bucket/$bucket" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_KEY")
            
            http_code=$(echo "$response" | tail -n1)
            
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
              echo "‚úÖ $bucket: accessible"
            else
              echo "‚ùå $bucket: not accessible (HTTP $http_code)"
            fi
          done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-dataset-publisher
    if: success() || failure()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Scan for vulnerabilities
        run: |
          echo "üîç Scanning for potential security issues..."
          
          # Check for hardcoded credentials
          if grep -r "password.*=" --include="*.js" --include="*.ts" --include="*.sql" . | grep -v test; then
            echo "‚ö†Ô∏è Potential hardcoded credentials found"
          fi
          
          # Check for API keys in code
          if grep -r -i "api[_-]key.*=" --include="*.js" --include="*.ts" . | grep -v test | grep -v example; then
            echo "‚ö†Ô∏è Potential API keys in code found"
          fi
          
          echo "‚úÖ Security scan completed"

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-dataset-publisher, test-edge-functions, test-storage-buckets, security-scan]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: ./all-test-results
          
      - name: Generate comprehensive report
        run: |
          echo "üìä Generating comprehensive test report..."
          
          cat << 'EOF' > test-report.md
          # Dataset Publisher Test Report
          
          **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Trigger:** ${{ github.event_name }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Test Results Summary
          
          | Test Suite | Status | Details |
          |------------|--------|---------|
          | Unit Tests | ${{ needs.test-dataset-publisher.result }} | Schema, validation |
          | Integration Tests | ${{ needs.test-dataset-publisher.result }} | ETL pipeline |
          | Performance Tests | ${{ needs.test-dataset-publisher.result }} | Load testing |
          | Edge Functions | ${{ needs.test-edge-functions.result }} | Function health |
          | Storage Buckets | ${{ needs.test-storage-buckets.result }} | Bucket access |
          | Security Scan | ${{ needs.security-scan.result }} | Vulnerability scan |
          
          ## Recommendations
          
          EOF
          
          # Add conditional recommendations based on results
          if [ "${{ needs.test-dataset-publisher.result }}" != "success" ]; then
            echo "- üö® **Critical**: Dataset publisher tests failed. Review medallion architecture." >> test-report.md
          fi
          
          if [ "${{ needs.test-edge-functions.result }}" != "success" ]; then
            echo "- ‚ö†Ô∏è **Important**: Edge Functions not responding. Check deployment status." >> test-report.md
          fi
          
          if [ "${{ needs.test-storage-buckets.result }}" != "success" ]; then
            echo "- ‚ö†Ô∏è **Important**: Storage bucket issues detected. Verify permissions." >> test-report.md
          fi
          
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "- üîí **Security**: Security scan found issues. Review and remediate." >> test-report.md
          fi
          
          # Add success message if all passed
          if [[ "${{ needs.test-dataset-publisher.result }}" == "success" && 
                "${{ needs.test-edge-functions.result }}" == "success" && 
                "${{ needs.test-storage-buckets.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "- ‚úÖ **All tests passed**: Dataset publisher system is healthy." >> test-report.md
          fi
          
          echo "" >> test-report.md
          echo "---" >> test-report.md
          echo "*Generated by GitHub Actions*" >> test-report.md
          
      - name: Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: test-report.md
          retention-days: 90