name: Deploy Scout v6
on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Environment (staging|prod)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
      deploy_vercel:
        description: 'Deploy to Vercel'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ github.event.inputs.target }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl postgresql-client
          
      - name: Configure environment
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          PG_CONN_URL: ${{ secrets.PG_CONN_URL }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "Environment configured for ${{ github.event.inputs.target }}"
          
      - name: Run deployment
        env:
          TARGET: ${{ github.event.inputs.target }}
          DEPLOY_VERCEL: ${{ github.event.inputs.deploy_vercel && '1' || '0' }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          PG_CONN_URL: ${{ secrets.PG_CONN_URL }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          chmod +x scripts/deploy/deploy-scout-batch.sh
          bash scripts/deploy/deploy-scout-batch.sh
          
      - name: Run smoke tests
        if: success()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          chmod +x scripts/deploy/smoke.sh
          bash scripts/deploy/smoke.sh
          
      - name: Upload snapshot
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: db-snapshot-${{ github.event.inputs.target }}-${{ github.run_id }}
          path: .snapshots/
          retention-days: 30
          
      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const target = '${{ github.event.inputs.target }}';
            const message = `${status} Scout v6.0 deployment to ${target.toUpperCase()} ${status === '✅' ? 'completed successfully' : 'failed'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            }).catch(() => {
              console.log('No issue context, skipping comment');
            });
