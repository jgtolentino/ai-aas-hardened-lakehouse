name: Dictionary Refresh

on:
  schedule:
    - cron: "0 2 * * *"  # Daily at 2 AM UTC (10 AM PHT)
  workflow_dispatch:
    inputs:
      reprocess:
        description: 'Queue items for reprocessing'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  refresh-dictionary:
    name: Refresh Brand Dictionary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq bc
      
      - name: Consolidate brands
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "🔄 Consolidating brand catalog..."
          psql "$SUPABASE_DB_URL" -c "SELECT scout.consolidate_brands();"
      
      - name: Cluster unknowns
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "🔍 Clustering unknown brands..."
          psql "$SUPABASE_DB_URL" -c "SELECT scout.cluster_unknowns();"
          
          # Report high-volume unknowns
          UNKNOWNS=$(psql "$SUPABASE_DB_URL" -t -A -F'|' -c "
            SELECT phrase, occurrence_count 
            FROM scout.unknown_clusters 
            WHERE status = 'pending' 
            ORDER BY occurrence_count DESC 
            LIMIT 10;
          ")
          
          echo "### Top Unknown Brands" >> $GITHUB_STEP_SUMMARY
          echo "| Phrase | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "$UNKNOWNS" | while IFS='|' read -r phrase count; do
            [ -n "$phrase" ] && echo "| $phrase | $count |" >> $GITHUB_STEP_SUMMARY
          done
      
      - name: Auto-promote brands
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "🚀 Auto-promoting brands with consensus..."
          psql "$SUPABASE_DB_URL" -c "SELECT scout.auto_promote_brands();"
      
      - name: Generate dictionary
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "📚 Generating dictionary from catalog..."
          mkdir -p dictionary-builds
          
          psql "$SUPABASE_DB_URL" -t -c "SELECT scout.generate_dictionary_json();" \
            | jq . > dictionary-builds/brand-dictionary.json
          
          BRAND_COUNT=$(jq '.brands | length' dictionary-builds/brand-dictionary.json)
          VERSION=$(jq -r '.version' dictionary-builds/brand-dictionary.json)
          
          echo "### Dictionary Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Brands**: $BRAND_COUNT" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload dictionary artifact
        uses: actions/upload-artifact@v4
        with:
          name: brand-dictionary-${{ github.run_id }}
          path: dictionary-builds/brand-dictionary.json
      
      - name: Deploy to detector
        if: github.event_name == 'schedule' || github.event.inputs.reprocess == 'true'
        env:
          BRAND_DETECTOR_URL: ${{ secrets.BRAND_DETECTOR_URL }}
        run: |
          if [ -n "$BRAND_DETECTOR_URL" ]; then
            echo "🚀 Deploying dictionary to detector..."
            
            RESPONSE=$(curl -s -X POST "$BRAND_DETECTOR_URL/dictionary/upsert" \
              -H "content-type: application/json" \
              -d @dictionary-builds/brand-dictionary.json)
            
            if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
              echo "✅ Dictionary deployed successfully"
            else
              echo "❌ Dictionary deployment failed"
              echo "$RESPONSE" | jq .
              exit 1
            fi
          else
            echo "⚠️ No detector URL configured, skipping deployment"
          fi
      
      - name: Check coverage metrics
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "📊 Checking coverage metrics..."
          
          METRICS=$(psql "$SUPABASE_DB_URL" -t -A -F'|' -c "
            SELECT 
              ROUND(AVG(brand_coverage) * 100, 2) as brand_cov,
              ROUND(AVG(price_coverage) * 100, 2) as price_cov
            FROM dq.v_coverage_summary 
            WHERE day >= CURRENT_DATE - INTERVAL '3 days';
          ")
          
          IFS='|' read -r BRAND_COV PRICE_COV <<< "$METRICS"
          
          echo "### Coverage Metrics (3-day average)" >> $GITHUB_STEP_SUMMARY
          echo "- **Brand Coverage**: ${BRAND_COV}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Price Coverage**: ${PRICE_COV}%" >> $GITHUB_STEP_SUMMARY
          
          # Fail if below thresholds
          if (( $(echo "$BRAND_COV < 70" | bc -l) )); then
            echo "❌ Brand coverage below 70% threshold"
            exit 1
          fi
          
          if (( $(echo "$PRICE_COV < 85" | bc -l) )); then
            echo "❌ Price coverage below 85% threshold"
            exit 1
          fi
      
      - name: Queue reprocessing
        if: github.event.inputs.reprocess == 'true'
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          echo "🔄 Queuing items for reprocessing..."
          psql "$SUPABASE_DB_URL" -c "SELECT scout.queue_reprocessing(7);"
          
          QUEUE_SIZE=$(psql "$SUPABASE_DB_URL" -t -c "
            SELECT COUNT(*) FROM scout.reprocess_queue WHERE status = 'pending';
          ")
          
          echo "### Reprocessing Queue" >> $GITHUB_STEP_SUMMARY
          echo "- **Items Queued**: $QUEUE_SIZE" >> $GITHUB_STEP_SUMMARY
      
      - name: Create issue for manual review
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🚨 Dictionary Refresh Failed';
            const body = `## Dictionary Refresh Failure
            
            The automated dictionary refresh failed during the ${context.workflow} workflow.
            
            **Run ID**: ${context.runId}
            **Time**: ${new Date().toISOString()}
            
            ### Required Actions:
            1. Check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            2. Review coverage metrics
            3. Manually inspect unknown clusters
            4. Fix any data quality issues
            
            ### SQL to investigate:
            \`\`\`sql
            -- High-volume unknowns
            SELECT * FROM scout.unknown_clusters 
            WHERE status = 'pending' 
            ORDER BY occurrence_count DESC 
            LIMIT 20;
            
            -- Recent coverage
            SELECT * FROM dq.v_coverage_summary 
            ORDER BY day DESC 
            LIMIT 7;
            \`\`\``;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dictionary', 'data-quality', 'automated']
            });