name: Kubernetes Policy Gate

on:
  pull_request:
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/Dockerfile'

jobs:
  opa-policy-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: 0.58.0
    
    - name: Validate Kubernetes manifests
      run: |
        # Check for :latest tags
        echo "Checking for :latest tags..."
        if grep -r "image:.*:latest" platform/; then
          echo "ERROR: Found :latest tags in manifests"
          exit 1
        fi
        
        # Check for missing resource limits
        echo "Checking for resource limits..."
        for yaml in $(find platform/ -name "*.yaml" -o -name "*.yml"); do
          if grep -q "kind: Deployment\|kind: StatefulSet" "$yaml"; then
            if ! grep -A20 "containers:" "$yaml" | grep -q "limits:"; then
              echo "ERROR: Missing resource limits in $yaml"
              exit 1
            fi
          fi
        done
        
        # Check for missing probes
        echo "Checking for liveness/readiness probes..."
        for yaml in $(find platform/ -name "*.yaml" -o -name "*.yml"); do
          if grep -q "kind: Deployment\|kind: StatefulSet" "$yaml"; then
            if ! grep -q "livenessProbe:\|readinessProbe:" "$yaml"; then
              echo "WARNING: Missing health probes in $yaml"
            fi
          fi
        done
    
    - name: OPA Policy evaluation
      run: |
        # Download policies
        mkdir -p policies
        cat > policies/k8s-security.rego <<'EOF'
        package kubernetes.security
        
        import future.keywords.contains
        import future.keywords.if
        import future.keywords.in
        
        # Deny containers without resource limits
        deny[msg] {
          input.kind in ["Deployment", "StatefulSet", "DaemonSet"]
          container := input.spec.template.spec.containers[_]
          not container.resources.limits
          msg := sprintf("Container '%s' is missing resource limits", [container.name])
        }
        
        # Deny containers running as root
        deny[msg] {
          input.kind in ["Deployment", "StatefulSet", "DaemonSet"]
          container := input.spec.template.spec.containers[_]
          container.securityContext.runAsUser == 0
          msg := sprintf("Container '%s' runs as root", [container.name])
        }
        
        # Deny containers with privileged mode
        deny[msg] {
          input.kind in ["Deployment", "StatefulSet", "DaemonSet"]
          container := input.spec.template.spec.containers[_]
          container.securityContext.privileged == true
          msg := sprintf("Container '%s' runs in privileged mode", [container.name])
        }
        
        # Deny services without NetworkPolicy
        deny[msg] {
          input.kind == "Service"
          not networkpolicy_exists(input.metadata.namespace, input.spec.selector)
          msg := sprintf("Service '%s' has no NetworkPolicy", [input.metadata.name])
        }
        
        networkpolicy_exists(namespace, selector) {
          # This would need to check against actual NetworkPolicies
          # For now, just check if namespace is 'aaas'
          namespace == "aaas"
        }
        EOF
        
        # Run OPA checks
        for yaml in $(find platform/ -name "*.yaml" -o -name "*.yml"); do
          echo "Checking $yaml..."
          if grep -q "^kind:" "$yaml"; then
            opa eval -d policies/k8s-security.rego -i "$yaml" \
              "data.kubernetes.security.deny[x]" || true
          fi
        done

  dockerfile-policy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Dockerfile policies
      run: |
        for dockerfile in $(find . -name "Dockerfile*"); do
          echo "Checking $dockerfile..."
          
          # Check for non-root user
          if ! grep -q "USER [^r][^o][^o][^t]" "$dockerfile"; then
            echo "WARNING: $dockerfile may run as root"
          fi
          
          # Check for health check
          if ! grep -q "HEALTHCHECK" "$dockerfile"; then
            echo "INFO: $dockerfile missing HEALTHCHECK"
          fi
          
          # Check for specific version tags
          if grep -E "FROM.*:latest|FROM.*:main|FROM.*:master" "$dockerfile"; then
            echo "ERROR: $dockerfile uses non-specific base image tag"
            exit 1
          fi
        done

  security-scanning:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Kubesec scan
      uses: controlplaneio/kubesec-action@v0.0.2
      with:
        input: platform/lakehouse/trino/trino.yaml
      continue-on-error: true
    
    - name: Note about Polaris
      run: |
        echo "ℹ️ Polaris audit moved to dedicated workflow: polaris-audit.yml"
        echo "   This provides proper pinning, security gates, and artifact uploads"