name: Release Images (GHCR)

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build & Push (${{ matrix.svc }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # For keyless signing
    strategy:
      matrix:
        svc: [api, worker, brand-model]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate image names
        id: names
        run: |
          echo "image=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.svc }}" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build & Push (main/tags/dispatch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.svc }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Capture digest
        if: github.event_name != 'pull_request'
        id: digest
        run: echo "DIGEST=${{ steps.meta.outputs.tags }}" >> $GITHUB_ENV

      - name: Generate SBOM (SPDX)
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ steps.names.outputs.image }}:$(echo ${{ steps.meta.outputs.tags }} | head -n1 | sed 's/.*://g')
          docker run --rm anchore/syft:latest ${{ steps.names.outputs.image }}:$(echo ${{ steps.meta.outputs.tags }} | head -n1 | sed 's/.*://g') -o spdx-json > sbom-${{ matrix.svc }}.spdx.json

      - name: Upload SBOM artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.svc }}
          path: sbom-${{ matrix.svc }}.spdx.json

      - name: Cosign sign & attest (keyless)
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          curl -sSL -o cosign.tgz https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64.tar.gz
          tar -xzf cosign.tgz
          ./cosign version
          # sign image tags emitted by metadata-action
          for TAG in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            ./cosign sign --yes ${TAG}
            ./cosign attest --yes --type spdx --predicate sbom-${{ matrix.svc }}.spdx.json ${TAG}
          done