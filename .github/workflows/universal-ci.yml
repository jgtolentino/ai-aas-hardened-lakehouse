name: Universal CI

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: universal-ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'

jobs:
  # Quick universal validation
  universal-check:
    name: Universal Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Skip Dependabot PRs; run on main and human PRs
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request_target' && github.event.pull_request.user.login != 'dependabot[bot]' && !startsWith(github.event.pull_request.head.ref, 'dependabot/')) }}
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          persist-credentials: false
          fetch-depth: 0

      - name: Basic Repository Health
        run: |
          echo "=== Repository Health Check ==="
          echo "✓ Repository checked out successfully"
          echo "✓ Git history available"
          
          # Check for basic files
          if [ -f "README.md" ]; then
            echo "✓ README.md exists"
          else
            echo "⚠ README.md missing"
          fi
          
          if [ -f "package.json" ]; then
            echo "✓ package.json exists"
          fi
          
          if [ -f "pnpm-lock.yaml" ]; then
            echo "✓ pnpm-lock.yaml exists"
          fi
          
          # Check for common issues
          echo "=== Checking for common issues ==="
          
          # Basic security check (simplified)
          if find . -name "*.env*" -type f | head -1; then
            echo "⚠ Environment files found (review needed)"
          else
            echo "✓ No obvious environment files"
          fi

      - name: Security Scan (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # Node.js validation (if applicable)
  node-validation:
    name: Node.js Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ hashFiles('**/package.json') != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Enable corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: |
          if pnpm run typecheck 2>/dev/null; then
            echo "✓ Type checking passed"
          else
            echo "⚠ Type checking skipped or failed (non-blocking)"
          fi
        continue-on-error: true

      - name: Linting
        run: |
          if pnpm run lint 2>/dev/null; then
            echo "✓ Linting passed"
          else
            echo "⚠ Linting skipped or failed (non-blocking)"
          fi
        continue-on-error: true

      - name: Build validation
        run: |
          if pnpm run build 2>/dev/null; then
            echo "✓ Build successful"
          else
            echo "⚠ Build skipped or failed (non-blocking)"
          fi
        continue-on-error: true

  # Python validation (if applicable)
  python-validation:
    name: Python Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ hashFiles('**/*.py') != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Python syntax check
        run: |
          echo "=== Python Syntax Validation ==="
          python -m py_compile $(find . -name "*.py" | head -20) || echo "Some Python files have syntax issues"

      - name: Git Expert validation (if exists)
        if: ${{ hashFiles('agents/git-expert/**/*.py') != '' }}
        run: |
          echo "=== Git Expert Validation ==="
          cd agents/git-expert
          pip install -e . || echo "Git Expert installation failed"
          python -c "from src.git_expert import __version__; print(f'Git Expert version: {__version__}')" || echo "Git Expert import test failed"

  # Database validation (if applicable) 
  database-validation:
    name: Database Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ hashFiles('db/**', 'supabase/**') != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Database structure check
        run: |
          echo "=== Database Structure Check ==="
          if [ -d "db/migrations" ]; then
            echo "✓ Database migrations directory exists"
            echo "Found $(ls db/migrations/*.sql 2>/dev/null | wc -l) migration files"
          fi
          
          if [ -d "supabase" ]; then
            echo "✓ Supabase directory exists"
            if [ -f "supabase/config.toml" ]; then
              echo "✓ Supabase config exists"
            fi
          fi

  # Final status
  ci-status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [universal-check, node-validation, python-validation, database-validation]
    if: always()
    steps:
      - name: Determine CI Status
        run: |
          echo "=== CI Results Summary ==="
          echo "Universal Check: ${{ needs.universal-check.result }}"
          echo "Node Validation: ${{ needs.node-validation.result }}"
          echo "Python Validation: ${{ needs.python-validation.result }}"
          echo "Database Validation: ${{ needs.database-validation.result }}"
          
          # Count failures
          failures=0
          if [ "${{ needs.universal-check.result }}" = "failure" ]; then
            failures=$((failures + 1))
            echo "❌ Universal check failed"
          fi
          
          # Only fail CI if universal check fails (others are informational)
          if [ $failures -gt 0 ]; then
            echo "❌ CI failed with $failures critical failures"
            exit 1
          else
            echo "✅ CI passed! All checks completed successfully"
          fi

      - name: PR Success Comment
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **CI passed!** This PR is ready for review.'
            })
