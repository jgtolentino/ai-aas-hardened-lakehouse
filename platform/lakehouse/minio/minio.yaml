apiVersion: v1
kind: Service
metadata: { name: minio, namespace: aaas, labels: { app: minio } }
spec:
  selector: { app: minio }
  ports:
    - { name: s3, port: 9000, targetPort: 9000 }
    - { name: console, port: 9001, targetPort: 9001 }
---
apiVersion: apps/v1
kind: StatefulSet
metadata: { name: minio, namespace: aaas }
spec:
  serviceName: minio
  replicas: 1
  selector: { matchLabels: { app: minio } }
  template:
    metadata: { labels: { app: minio } }
    spec:
      containers:
        - name: minio
          image: quay.io/minio/minio:RELEASE.2025-03-20T00-00-00Z
          args: ["server","/data","--console-address",":9001"]
          env:
            - name: MINIO_ROOT_USER
              valueFrom: { secretKeyRef: { name: minio-keys, key: access_key } }
            - name: MINIO_ROOT_PASSWORD
              valueFrom: { secretKeyRef: { name: minio-keys, key: secret_key } }
          ports:
            - { containerPort: 9000, name: s3 }
            - { containerPort: 9001, name: console }
          volumeMounts:
            - { name: data, mountPath: /data }
          resources:
            requests: { cpu: "250m", memory: "512Mi" }
            limits:   { cpu: "1000m", memory: "2Gi" }
          livenessProbe:
            httpGet: { path: /minio/health/live, port: 9000 }
            initialDelaySeconds: 30
          readinessProbe:
            httpGet: { path: /minio/health/ready, port: 9000 }
            initialDelaySeconds: 15
      securityContext: { fsGroup: 1000, runAsUser: 1000, runAsGroup: 1000 }
  volumeClaimTemplates:
    - metadata: { name: data }
      spec:
        accessModes: ["ReadWriteOnce"]
        resources: { requests: { storage: 200Gi } }
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata: { name: minio-allow-aaas, namespace: aaas }
spec:
  podSelector: { matchLabels: { app: minio } }
  ingress:
    - from:
        - namespaceSelector: { matchLabels: { kubernetes.io/metadata.name: aaas } }
      ports: [ { port: 9000 }, { port: 9001 } ]
  egress:
    - to: [ { namespaceSelector: {} } ] # allow DNS/K8s, tighten later
