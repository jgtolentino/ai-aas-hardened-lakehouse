apiVersion: v1
kind: Service
metadata: { name: trino, namespace: aaas, labels: { app: trino } }
spec:
  selector: { app: trino }
  ports: [ { name: http, port: 8080, targetPort: 8080 } ]
---
apiVersion: v1
kind: ConfigMap
metadata: { name: trino-config, namespace: aaas }
data:
  node.properties: |
    node.environment=prod
    node.roles=coordinator,worker
    node.data-dir=/data/trino
  jvm.config: |
    -Xmx6G
    -XX:+UseG1GC
  config.properties: |
    coordinator=true
    node-scheduler.include-coordinator=true
    http-server.http.port=8080
    discovery-server.enabled=true
    discovery.uri=http://localhost:8080
  catalog/iceberg.properties: |
    connector.name=iceberg
    catalog.impl=org.apache.iceberg.nessie.NessieCatalog
    nessie.uri=${ENV:NESSIE_URI}
    nessie.ref=main
    iceberg.file-format=parquet
    s3.endpoint=${ENV:MINIO_ENDPOINT}
    s3.path-style-access=true
    s3.aws-access-key=${ENV:MINIO_ACCESS}
    s3.aws-secret-key=${ENV:MINIO_SECRET}
  catalog/postgres.properties: |
    connector.name=postgresql
    connection-url=jdbc:postgresql://${ENV:PG_HOST}:${ENV:PG_PORT}/${ENV:PG_DB}?sslmode=require
    connection-user=${ENV:PG_USER}
    connection-password=${ENV:PG_PASS}
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: trino, namespace: aaas }
spec:
  replicas: 1
  selector: { matchLabels: { app: trino } }
  template:
    metadata: { labels: { app: trino } }
    spec:
      containers:
        - name: trino
          image: trinodb/trino:440
          ports: [ { containerPort: 8080, name: http } ]
          volumeMounts: [ { name: trino-config, mountPath: /etc/trino } ]
          envFrom:
            - secretRef: { name: trino-secrets }
          resources:
            requests: { cpu: "1", memory: "4Gi" }
            limits:   { cpu: "4", memory: "8Gi" }
          livenessProbe:
            httpGet: { path: /v1/info, port: 8080 }
            initialDelaySeconds: 20
          readinessProbe:
            httpGet: { path: /v1/info, port: 8080 }
            initialDelaySeconds: 10
      volumes:
        - name: trino-config
          configMap: { name: trino-config }
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata: { name: trino-allow-aaas, namespace: aaas }
spec:
  podSelector: { matchLabels: { app: trino } }
  ingress:
    - from:
        - namespaceSelector: { matchLabels: { kubernetes.io/metadata.name: aaas } }
      ports: [ { port: 8080 } ]
  egress:
    - to:
        - podSelector: { matchLabels: { app: nessie } }
        - podSelector: { matchLabels: { app: minio } }
        - namespaceSelector: {} # DNS
