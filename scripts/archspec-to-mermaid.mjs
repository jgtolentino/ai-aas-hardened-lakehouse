#!/usr/bin/env node
import fs from 'fs'; 
import path from 'path'; 
import yaml from 'js-yaml'; 
import { execSync } from 'child_process';

const ROOT = process.cwd();
const SPEC = path.join(ROOT,'assets/archspec/archspec.yaml');
const DOCS = path.join(ROOT,'docs-site/docs/overview/arch');
const STATIC = path.join(ROOT,'docs-site/static/diagrams');
fs.mkdirSync(DOCS,{recursive:true}); 
fs.mkdirSync(STATIC,{recursive:true});

if (!fs.existsSync(SPEC)) { 
  console.log('[arch] no archspec.yaml'); 
  process.exit(0); 
}

const spec = yaml.load(fs.readFileSync(SPEC,'utf8'));

const nodes = spec.nodes || []; 
const links = spec.links || [];
const mermaid = `%% Autogenerated
flowchart LR
${nodes.map(n=>`${n.id}[${n.label}:::${n.tier||'default'}]`).join('\n')}
${links.map(e=>`${e.from}-->${e.to}`).join('\n')}

classDef default stroke:#555,stroke-width:1px,fill:#fff;
classDef data fill:#eef,stroke:#446;
classDef compute fill:#efe,stroke:#464;
classDef edge fill:#fee,stroke:#644;
`;

const mmdPath = path.join(STATIC,'system-landscape.mmd');
fs.writeFileSync(mmdPath, mermaid, 'utf8');
execSync(`npx --yes @mermaid-js/mermaid-cli -i "${mmdPath}" -o "${STATIC}/system-landscape.svg"`, {stdio:'inherit'});

const mdx =
`---
id: system-landscape
title: System Landscape
sidebar_label: Architecture
description: Autogenerated from archspec.yaml
tags: [architecture, mermaid]
---

> Source: \`assets/archspec/archspec.yaml\`

![System Landscape](/diagrams/system-landscape.svg)
`;
fs.writeFileSync(path.join(DOCS,'system-landscape.mdx'), mdx, 'utf8');
console.log('[arch] system landscape generated.');