/**
 * Configuration file for Figma design-to-code extraction
 */

const path = require('path');

// Base configuration
const CONFIG = {
  // API Configuration
  api: {
    figmaToken: process.env.FIGMA_ACCESS_TOKEN,
    fileId: process.env.FIGMA_FILE_ID || 'scout-dashboard-design-file',
    baseUrl: 'https://api.figma.com/v1',
    timeout: 30000,
    retryAttempts: 3
  },

  // Output paths
  paths: {
    outputDir: path.join(__dirname, '../../apps/scout-dashboard/src/components/generated'),
    stylesDir: path.join(__dirname, '../../apps/scout-dashboard/src/styles/generated'),
    assetsDir: path.join(__dirname, '../../apps/scout-dashboard/src/assets/generated'),
    configDir: path.join(__dirname, '../../apps/scout-dashboard/src/config')
  },

  // Processing options
  processing: {
    componentFilter: process.env.FIGMA_COMPONENT_FILTER?.split(',').map(s => s.trim()),
    skipImages: process.env.SKIP_IMAGES === 'true',
    generateIndex: process.env.GENERATE_INDEX !== 'false',
    cssFormat: process.env.CSS_FORMAT || 'css', // 'css' | 'scss' | 'styled-components'
    includeVariants: true,
    extractAssets: true,
    generateTypes: true
  },

  // Design token mapping
  tokens: {
    colors: {
      prefix: 'color',
      categories: ['primary', 'secondary', 'surface', 'text', 'border', 'state']
    },
    typography: {
      prefix: 'typography',
      properties: ['fontSize', 'fontWeight', 'fontFamily', 'lineHeight', 'letterSpacing']
    },
    spacing: {
      prefix: 'spacing',
      scale: [2, 4, 6, 8, 12, 16, 20, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128]
    },
    shadows: {
      prefix: 'shadow',
      categories: ['sm', 'md', 'lg', 'xl', '2xl']
    },
    borders: {
      prefix: 'border',
      properties: ['width', 'style', 'radius']
    }
  },

  // Component generation
  components: {
    template: 'react-typescript',
    includeProps: true,
    includeStyles: true,
    includeStories: false, // Storybook stories
    includeDocs: true,
    propsInterface: true,
    defaultExport: true
  },

  // File naming conventions
  naming: {
    componentCase: 'PascalCase', // PascalCase | camelCase
    fileCase: 'PascalCase',      // PascalCase | camelCase | kebab-case
    cssCase: 'kebab-case',       // kebab-case | camelCase
    variableCase: 'camelCase'    // camelCase | snake_case
  },

  // Debug and logging
  debug: {
    enabled: process.env.DEBUG === 'true',
    verbose: process.env.VERBOSE === 'true',
    logLevel: process.env.LOG_LEVEL || 'info', // error | warn | info | debug
    outputLogs: true
  },

  // File templates
  templates: {
    component: `import React from 'react';
import './generated-styles.css';

export interface {{ComponentName}}Props {
{{Props}}
  className?: string;
}

export const {{ComponentName}}: React.FC<{{ComponentName}}Props> = ({
{{PropsDestructuring}}
  className = ''
}) => {
  return (
{{JSX}}
  );
};

export default {{ComponentName}};
`,

    index: `// Generated components from Figma
// Do not edit this file manually - it will be overwritten

{{Exports}}
`,

    css: `:root {
{{CSSCustomProperties}}
}

{{UtilityClasses}}
`,

    types: `// Generated types from Figma design tokens
// Do not edit this file manually - it will be overwritten

export interface DesignTokens {
{{TokenInterfaces}}
}

export const designTokens: DesignTokens;
`
  },

  // Figma-specific settings
  figma: {
    // Node types to extract as components
    componentNodeTypes: ['COMPONENT', 'COMPONENT_SET', 'INSTANCE'],
    
    // Node types to extract styles from
    styleNodeTypes: ['TEXT', 'RECTANGLE', 'FRAME', 'GROUP'],
    
    // Properties to extract
    extractProperties: [
      'fills',
      'strokes', 
      'effects',
      'textStyles',
      'cornerRadius',
      'constraints',
      'layoutMode',
      'itemSpacing',
      'paddingLeft',
      'paddingRight', 
      'paddingTop',
      'paddingBottom'
    ],
    
    // Image export settings
    imageExport: {
      format: 'png',
      scale: 2,
      quality: 0.8,
      maxSize: 2048
    }
  },

  // Integration settings
  integration: {
    scoutDashboard: {
      enabled: true,
      chartWrappers: true,
      filterStore: true,
      configJson: true
    },
    
    tailwind: {
      enabled: true,
      generateUtilities: true,
      prefix: 'figma-'
    },
    
    storybook: {
      enabled: false,
      generateStories: false
    }
  }
};

// Environment-specific overrides
const envOverrides = {
  development: {
    debug: {
      enabled: true,
      verbose: true,
      logLevel: 'debug'
    },
    processing: {
      skipImages: true // Faster processing in dev
    }
  },
  
  production: {
    debug: {
      enabled: false,
      verbose: false,
      logLevel: 'warn'
    },
    processing: {
      skipImages: false,
      generateIndex: true,
      generateTypes: true
    }
  },
  
  test: {
    paths: {
      outputDir: path.join(__dirname, './test-output/components'),
      stylesDir: path.join(__dirname, './test-output/styles')
    },
    processing: {
      skipImages: true,
      componentFilter: ['TestComponent']
    }
  }
};

// Apply environment overrides
const env = process.env.NODE_ENV || 'development';
if (envOverrides[env]) {
  mergeDeep(CONFIG, envOverrides[env]);
}

// Deep merge utility
function mergeDeep(target, source) {
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      if (!target[key]) target[key] = {};
      mergeDeep(target[key], source[key]);
    } else {
      target[key] = source[key];
    }
  }
  return target;
}

// Validation
function validateConfig() {
  const errors = [];

  if (!CONFIG.api.figmaToken) {
    errors.push('FIGMA_ACCESS_TOKEN environment variable is required');
  }

  if (!CONFIG.api.fileId) {
    errors.push('FIGMA_FILE_ID environment variable is required');
  }

  if (errors.length > 0) {
    throw new Error(`Configuration validation failed:\n${errors.map(e => `  - ${e}`).join('\n')}`);
  }
}

// Export configuration
module.exports = {
  CONFIG,
  validateConfig,
  envOverrides
};