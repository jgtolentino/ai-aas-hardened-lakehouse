#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';

const ROOT = process.cwd();
const DOCS = path.join(ROOT, 'docs-site', 'docs');
const WIKI = path.join(ROOT, 'docs-site', 'wiki');
const AGENT_DIRS = ['mcp', 'agents'].map(d => path.join(ROOT, d));

const ensureDir = p => fs.mkdirSync(p, { recursive: true });
ensureDir(path.join(DOCS, 'agents'));
ensureDir(WIKI);

const slugify = s => s.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');

const fm = ({ id, title, desc, tags=[] }) => `---
id: ${id}
title: ${title}
sidebar_label: ${title}
description: ${desc}
tags: [${tags.join(', ')}]
---
`;

const mdxFor = a => {
  const id = `agent-${slugify(a.name)}`;
  const title = `Agent: ${a.name}`;
  const desc = a.role || 'AI Agent';
  const header = `---
id: ${id}
title: "${title}"
sidebar_label: "${title}"
description: "${desc}"
tags: [agent, mcp, docs]
---
`;
  const spec = '```yaml\n' + yaml.dump(a).trim() + '\n```';

  return `${header}
> ${desc}

## Summary
This page is autogenerated from \`${a.__src || 'mcp/*/*.yaml'}\`.

## Setup
1. Place the spec in \`mcp/agents/${slugify(a.name)}.yaml\`.
2. Configure required \`.env\` keys (no secrets in repo).

## Run
\`\`\`bash
pnpm docs:gen
pnpm docs:build
\`\`\`

## Spec (reference)
${spec}

## Validate
\`\`\`bash
pnpm docs:lint && pnpm docs:linkcheck
\`\`\`

## Troubleshoot
- If sidebar missing, check \`docs-site/sidebars.js\` export.
- Clear cache: \`pnpm -C docs-site docusaurus clear\`.
`;
};

const wikiFor = a => `# ${a.name}\n\n${a.role || ''}\n\nFull page lives on the Docusaurus site.\n`;

const scan = dir => {
  if (!fs.existsSync(dir)) return [];
  const out = [];
  for (const f of fs.readdirSync(dir)) {
    const p = path.join(dir, f);
    const st = fs.statSync(p);
    if (st.isDirectory()) out.push(...scan(p));
    else if (/\.(ya?ml)$/.test(f)) out.push(p);
  }
  return out;
};

const files = AGENT_DIRS.flatMap(scan);
const agents = [];
for (const file of files) {
  try {
    const obj = yaml.load(fs.readFileSync(file, 'utf8'));
    if (obj && obj.name) { obj.__src = path.relative(ROOT, file); agents.push(obj); }
  } catch {}
}
for (const a of agents) {
  const base = slugify(a.name);
  fs.writeFileSync(path.join(DOCS, 'agents', `${base}.mdx`), mdxFor(a));
  fs.writeFileSync(path.join(WIKI, `${base}.md`), wikiFor(a));
}
fs.writeFileSync(path.join(WIKI, 'Home.md'), `# AI AAS Hardened Lakehouse â€” Wiki\n\nQuick links:\n- [[Agents]](./Agents.md)\n`);
fs.writeFileSync(path.join(WIKI, 'Agents.md'), agents.map(a => `- [[${a.name}]](./${slugify(a.name)}.md)`).join('\n') || 'No agents found');

console.log(`Generated ${agents.length} agent pages.`);